# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import remotes.image_procedure_pb2 as image__procedure__pb2


class ImageProcedureStub(object):
    """service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ImageMeanWH = channel.unary_unary(
                '/ImageProcedure/ImageMeanWH',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Prediction.FromString,
                )
        self.ImageFeature = channel.unary_unary(
                '/ImageProcedure/ImageFeature',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImagePre = channel.unary_unary(
                '/ImageProcedure/ImagePre',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImageOCR = channel.unary_unary(
                '/ImageProcedure/ImageOCR',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImageFaceLocation = channel.unary_unary(
                '/ImageProcedure/ImageFaceLocation',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImageFaceEncoding = channel.unary_unary(
                '/ImageProcedure/ImageFaceEncoding',
                request_serializer=image__procedure__pb2.B64Image.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImageFaceMatch = channel.unary_unary(
                '/ImageProcedure/ImageFaceMatch',
                request_serializer=image__procedure__pb2.MatchVec.SerializeToString,
                response_deserializer=image__procedure__pb2.Feature.FromString,
                )
        self.ImageDrawBox = channel.unary_unary(
                '/ImageProcedure/ImageDrawBox',
                request_serializer=image__procedure__pb2.B64Image_Box.SerializeToString,
                response_deserializer=image__procedure__pb2.B64Image.FromString,
                )


class ImageProcedureServicer(object):
    """service
    """

    def ImageMeanWH(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageFeature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImagePre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageOCR(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageFaceLocation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageFaceEncoding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageFaceMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageDrawBox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImageProcedureServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ImageMeanWH': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageMeanWH,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Prediction.SerializeToString,
            ),
            'ImageFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageFeature,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImagePre': grpc.unary_unary_rpc_method_handler(
                    servicer.ImagePre,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImageOCR': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageOCR,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImageFaceLocation': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageFaceLocation,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImageFaceEncoding': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageFaceEncoding,
                    request_deserializer=image__procedure__pb2.B64Image.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImageFaceMatch': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageFaceMatch,
                    request_deserializer=image__procedure__pb2.MatchVec.FromString,
                    response_serializer=image__procedure__pb2.Feature.SerializeToString,
            ),
            'ImageDrawBox': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageDrawBox,
                    request_deserializer=image__procedure__pb2.B64Image_Box.FromString,
                    response_serializer=image__procedure__pb2.B64Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImageProcedure', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImageProcedure(object):
    """service
    """

    @staticmethod
    def ImageMeanWH(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageMeanWH',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Prediction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageFeature',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImagePre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImagePre',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageOCR(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageOCR',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageFaceLocation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageFaceLocation',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageFaceEncoding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageFaceEncoding',
            image__procedure__pb2.B64Image.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageFaceMatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageFaceMatch',
            image__procedure__pb2.MatchVec.SerializeToString,
            image__procedure__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageDrawBox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImageProcedure/ImageDrawBox',
            image__procedure__pb2.B64Image_Box.SerializeToString,
            image__procedure__pb2.B64Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
